{"version":3,"sources":["webpack://DNA/webpack/universalModuleDefinition","webpack://DNA/webpack/bootstrap","webpack://DNA/./src/Component.js","webpack://DNA/./src/GameObject.js","webpack://DNA/./src/input/Input.js","webpack://DNA/./src/input/Pressable.js","webpack://DNA/./src/coordinate/Coordinate.js","webpack://DNA/./src/DNA.js","webpack://DNA/./src/Transform.js","webpack://DNA/./src/GameLoop.js","webpack://DNA/./src/components/Camera.js","webpack://DNA/./src/components/Text.js","webpack://DNA/./src/components/Shape.js","webpack://DNA/./src/components/Hitbox.js","webpack://DNA/./src/components/Physics.js","webpack://DNA/./src/input/Mouse.js","webpack://DNA/./src/input/MouseButton.js","webpack://DNA/./src/input/Keyboard.js","webpack://DNA/./src/input/Key.js","webpack://DNA/./src/shapeTypes/Circle.js","webpack://DNA/./src/coordinate/Cartesian.js","webpack://DNA/./src/coordinate/Polar.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_gameObject","gameObject","transform","deltaTime","ctx","Transform","x","y","rotation","_transform","gameObjects","components","maintainAbsolutePosition","maintainAbsoluteRotation","prevAbsoluteX","prevAbsoluteY","prevAbsoluteRotation","parent","absoluteX","absoluteY","absoluteRotation","removeGameObject","push","_cacheAbsolutePosition","index","indexOf","splice","component","forEach","update","_dead","_destroyNow","render","save","translate","rotate","restore","pressDown","pressUp","eventPressable","_pressables","document","addEventListener","event","pressableCode","pressable","_pressed","callback","_onPressDown","_onPressUp","recalculateCartesian","coordinate","_x","Math","sin","_angle","_magnitude","_y","cos","_dirtyCartesian","recalculatePolar","sqrt","pow","atan2","PI","_dirtyPolar","magnitude","angle","GameObject","GameLoop","Component","Camera","Text","Shape","Hitbox","Physics","Mouse","Keyboard","DNA","Components","Input","ShapeTypes","Circle","Coordinate","Cartesian","Polar","_keyboard","_rotation","_absoluteDirty","_absoluteX","_setAbsolutePosition","_absoluteY","_absoluteRotation","parentAbsoluteX","parentAbsoluteY","parentAbsoluteRotation","offsetX","offsetY","_currAnimationFrame","window","requestAnimationFrame","currTime","gameLoop","prevTime","canvas","super","_canvas","getContext","_width","width","_height","height","clearRect","offsetRotation","text","font","fillStyle","textAlign","textBaseline","fillText","shapeType","strokeStyle","hurtboxes","_hurtboxes","_onHit","_isHitting","hurtbox","isHitting","hitCallback","elapsedTime","MouseButton","camera","_onMouseMove","buttonCode","button","rect","getBoundingClientRect","clientX","round","left","clientY","top","Pressable","onMouseDown","onMouseUp","Key","keyCode","onKeyDown","onKeyUp","radius","beginPath","arc","stroke","_isHittingCircle","hitbox"],"mappings":"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","file":"DNA.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DNA\"] = factory();\n\telse\n\t\troot[\"DNA\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * A base class for components of GameObjects\n */\nclass Component {\n  /**\n   * Create a component\n   */\n  constructor() {}\n\n  /**\n   * The GameObject this Component is attached to\n   * @type {GameObject}\n   */\n  get gameObject() {\n    return this._gameObject || null;\n  }\n\n  /**\n   * The Transform of the GameObject this Component is attached to\n   * @type {Transform}\n   */\n  get transform() {\n    return this.gameObject ? this.gameObject.transform : null;\n  }\n\n  /**\n   * Runs game logic for this component every frame\n   * To be implimented for individual components\n   * Called by the GameLoop every frame\n   * Can also be called manually\n   * @param {number} deltaTime - The time elapsed since the previous update\n   */\n  update(deltaTime) {}\n\n  /**\n   * Renders the component every frame\n   * To be implimented for individual components\n   * Called by Cameras every frame\n   * Can also be called manually\n   * @param {CanvasRenderingContext2D} ctx - The context to be rendered on\n   */\n  render(ctx) {}\n}\n\nmodule.exports = Component;\n","const Transform = require(\"./Transform\");\n\n/**\n * GameObjects store game entities and logic\n * GameObjects are composites that propagate call to children GameObjects\n * GameObjects hold Components which handle game logic\n */\nclass GameObject {\n  /**\n   * Create a GameObject\n   * @param {number} x - The x-coordinate for the GameObject's Transform\n   * @param {number} y - The y-coordinate for the GameObject's Transform\n   * @param {number} rotation - The rotation for the GameObject's Transform\n   */\n  constructor(x = 0, y = 0, rotation = 0) {\n    this._transform = new Transform(this, x, y, rotation);\n\n    this.gameObjects = [];\n    this.components = [];\n  }\n\n  /**\n   * This GameObject\n   * @type {GameObject}\n   */\n  get gameObject() {\n    return this;\n  }\n\n  /**\n   * The Transform of this GameObject\n   * @type {Transform}\n   */\n  get transform() {\n    return this._transform || null;\n  }\n\n  /**\n   * Add a child GameObject\n   * @param {GameObject} gameObject - The child game object\n   * @param {boolean} maintainAbsolutePosition - GameObject should maintain its absolute position\n   * @param {boolean} maintainAbsoluteRotation  - Gamebject should maintain its absolute rotation\n   */\n  addGameObject(\n    gameObject,\n    maintainAbsolutePosition = false,\n    maintainAbsoluteRotation = false\n  ) {\n    let prevAbsoluteX;\n    let prevAbsoluteY;\n    let prevAbsoluteRotation;\n    if (gameObject.parent) {\n      if (maintainAbsolutePosition) {\n        prevAbsoluteX = gameObject.transform.absoluteX;\n        prevAbsoluteY = gameObject.transform.absoluteY;\n      }\n      if (maintainAbsoluteRotation) {\n        prevAbsoluteRotation = gameObject.transform.absoluteRotation;\n      }\n      gameObject.parent.removeGameObject(gameObject);\n    }\n    gameObject.parent = this;\n    this.gameObjects.push(gameObject);\n\n    if (gameObject.parent && maintainAbsolutePosition) {\n      gameObject.transform.absoluteX = prevAbsoluteX;\n      gameObject.transform.absoluteY = prevAbsoluteY;\n    }\n    if (gameObject.parent && maintainAbsoluteRotation) {\n      gameObject.transform.absoluteRotation = prevAbsoluteRotation;\n    }\n\n    gameObject.transform._cacheAbsolutePosition();\n  }\n\n  /**\n   * Remove a child GameObject if it exists\n   * @param {GameObject} gameObject\n   */\n  removeGameObject(gameObject) {\n    let index = this.gameObjects.indexOf(gameObject);\n    if (index >= 0) {\n      this.gameObjects.splice(index, 1);\n    }\n\n    gameObject.transform._cacheAbsolutePosition();\n  }\n\n  /**\n   * Add a Component\n   * @param {Component} component - Component to be added\n   */\n  addComponent(component) {\n    component._gameObject = this;\n    this.components.push(component);\n  }\n\n  /**\n   * Remove a Component if it exists\n   * @param {Component} component - Component to be removed\n   */\n  removeComponent(component) {\n    let index = this.components.indexOf(component);\n    if (index >= 0) {\n      this.components.splice(index, 1);\n    }\n  }\n\n  /**\n   * Updates the GameObject and all children GameObjects by updating all components\n   * Game logic is handled within component updates\n   * Called by the GameLoop every frame\n   * Can also be called manually\n   * @param {number} deltaTime - The time elapsed since the previous update\n   */\n  update(deltaTime) {\n    this.components.forEach(component => {\n      component.update(deltaTime);\n    });\n    this.gameObjects.forEach(gameObject => {\n      gameObject.update(deltaTime);\n    });\n    this.gameObjects.forEach(gameObject => {\n      if (gameObject._dead) {\n        gameObject._destroyNow();\n      }\n    });\n  }\n\n  /**\n   * Renders the GameObject and all children GameObjects by rendering all components\n   * Canvas rendering is handled within component renders\n   * Called by Cameras every frame\n   * Can also be called manually\n   * @param {CanvasRenderingContext2D} ctx - The context to be rendered on\n   */\n  render(ctx) {\n    this.components.forEach(component => {\n      component.render(ctx);\n    });\n    this.gameObjects.forEach(gameObject => {\n      // translating transform for each child so we don't have to translate after finding absolute offsets\n      ctx.save();\n      ctx.translate(gameObject.transform.x, -gameObject.transform.y);\n      ctx.rotate(gameObject.transform.rotation);\n\n      gameObject.render(ctx);\n\n      ctx.restore();\n    });\n  }\n\n  /**\n   * Destroys the GameObject by removing itself from its parent.\n   * Will delay until next update so this object will exist for the rest of the update cycle\n   */\n  destroy() {\n    this._dead = true;\n  }\n\n  _destroyNow() {\n    this.parent.removeGameObject(this);\n  }\n}\n\nmodule.exports = GameObject;\n","/**\n * Represents a type of input\n */\nclass Input {\n  constructor(pressDown, pressUp, eventPressable) {\n    this._pressables = {};\n\n    document.addEventListener(pressDown, event => {\n      const pressableCode = event[eventPressable];\n      const pressable = this._pressables[pressableCode];\n      if (pressable) {\n        pressable._pressed = true;\n      }\n\n      for (const pressableCode in this._pressables) {\n        const pressable = this._pressables[pressableCode];\n        for (const callback of pressable._onPressDown) {\n          callback(event);\n        }\n      }\n    });\n\n    document.addEventListener(pressUp, event => {\n      const pressableCode = event[eventPressable];\n      const pressable = this._pressables[pressableCode];\n      if (pressable) {\n        pressable._pressed = false;\n      }\n\n      for (const pressableCode in this._pressables) {\n        const pressable = this._pressables[pressableCode];\n        for (const callback of pressable._onPressUp) {\n          callback(event);\n        }\n      }\n    });\n  }\n}\n\nmodule.exports = Input;\n","/**\n * Handles logic for oressable input\n */\nclass Pressable {\n  constructor() {\n    this._pressed = false;\n\n    this._onPressDown = [];\n    this._onPressUp = [];\n  }\n\n  /**\n   * If this key is currently pressed\n   * @type {boolean}\n   */\n  get pressed() {\n    return this._pressed;\n  }\n}\n\nmodule.exports = Pressable;\n","function recalculateCartesian(coordinate) {\n  coordinate._x = Math.sin(coordinate._angle) * coordinate._magnitude;\n  coordinate._y = -Math.cos(coordinate._angle) * coordinate._magnitude;\n  coordinate._dirtyCartesian = false;\n}\n\n//TODO can recalculate angle and magnitude seperately\nfunction recalculatePolar(coordinate) {\n  coordinate._magnitude = Math.sqrt(\n    Math.pow(coordinate._x, 2) + Math.pow(coordinate._y, 2)\n  );\n  coordinate._angle = Math.atan2(coordinate._y, coordinate._x) + Math.PI / 2;\n  coordinate._dirtyPolar = false;\n}\n\n/**\n * Represent coordinates\n */\nclass Coordinate {\n  constructor() {\n    this._x;\n    this._y;\n\n    this._magnitude;\n    this._angle;\n\n    this._dirtyCartesian;\n    this._dirtyPolar;\n  }\n\n  get x() {\n    if (this._dirtyCartesian) {\n      recalculateCartesian(this);\n    }\n\n    return this._x;\n  }\n  set x(x) {\n    if (this._dirtyCartesian) {\n      recalculateCartesian(this);\n    }\n\n    this._x = x;\n    this._dirtyPolar = true;\n  }\n  get y() {\n    if (this._dirtyCartesian) {\n      recalculateCartesian(this);\n    }\n\n    return this._y;\n  }\n  set y(y) {\n    if (this._dirtyCartesian) {\n      recalculateCartesian(this);\n    }\n\n    this._y = y;\n    this._dirtyPolar = true;\n  }\n\n  get magnitude() {\n    if (this._dirtyPolar) {\n      recalculatePolar(this);\n    }\n\n    return this._magnitude;\n  }\n  set magnitude(magnitude) {\n    if (this._dirtyPolar) {\n      recalculatePolar(this);\n    }\n\n    this._magnitude = magnitude;\n    this._dirtyCartesian = true;\n  }\n  get angle() {\n    if (this._dirtyPolar) {\n      recalculatePolar(this);\n    }\n\n    return this._angle;\n  }\n  set angle(angle) {\n    if (this._dirtyPolar) {\n      recalculatePolar(this);\n    }\n\n    this._angle = angle;\n    this._dirtyCartesian = true;\n  }\n}\n\nmodule.exports = Coordinate;\n","const GameObject = require(\"./GameObject\");\nconst GameLoop = require(\"./GameLoop\");\nconst Component = require(\"./Component\");\n\nconst Camera = require(\"./components/Camera\");\nconst Text = require(\"./components/Text\");\nconst Shape = require(\"./components/Shape\");\nconst Hitbox = require(\"./components/Hitbox\");\nconst Physics = require(\"./components/Physics\");\n\nconst Mouse = require(\"./input/Mouse\");\nconst Keyboard = require(\"./input/Keyboard\");\n\nconst Circle = require(\"./shapeTypes/Circle\");\n\nconst Cartesian = require(\"./coordinate/Cartesian\");\nconst Polar = require(\"./coordinate/Polar\");\n\nconst DNA = {\n  GameObject: GameObject,\n  GameLoop: GameLoop,\n  Component: Component,\n\n  Components: {\n    Camera: Camera,\n    Text: Text,\n    Shape: Shape,\n    Hitbox: Hitbox,\n    Physics: Physics\n  },\n\n  Input: {\n    Mouse: Mouse\n  },\n\n  ShapeTypes: {\n    Circle: Circle\n  },\n\n  Coordinate: {\n    Cartesian: Cartesian,\n    Polar: Polar\n  },\n\n  get Keyboard() {\n    if (!this._keyboard) {\n      this._keyboard = new Keyboard();\n    }\n    return this._keyboard;\n  }\n};\n\nmodule.exports = DNA;\n","/**\n * Transform store positional information about GameObjects\n */\nclass Transform {\n  /**\n   * Create a Transform\n   * @param {GameObject} gameObject - The GameObject this Transform is attached to\n   * @param {number} x - The x-coordinate\n   * @param {number} y - The y-coordinate\n   * @param {number} rotation - The rotation in radians\n   */\n  constructor(gameObject, x = 0, y = 0, rotation = 0) {\n    this._gameObject = gameObject;\n    this._x = x;\n    this._y = y;\n    this._rotation = rotation;\n\n    this._cacheAbsolutePosition();\n  }\n\n  /**\n   * The GameObject this Transform is attached to\n   * @type {GameObject}\n   */\n  get gameObject() {\n    return this._gameObject;\n  }\n\n  /**\n   * The Transform of this GameObject\n   * @type {Transform}\n   */\n  get transform() {\n    return this;\n  }\n\n  /**\n   * The x-coordinate of the GameObject\n   * @type {number}\n   */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._absoluteDirty = true;\n  }\n\n  /**\n   * The y-coordinate of the GameObject\n   * @type {number}\n   */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._absoluteDirty = true;\n  }\n\n  /**\n   * The rotation of the GameObject\n   * @type {number}\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    this._rotation = value;\n    this._absoluteDirty = true;\n  }\n\n  /**\n   * The x-coordinate relative to the root GameObject\n   * @type {number}\n   */\n  get absoluteX() {\n    if (this._absoluteDirty) {\n      this._cacheAbsolutePosition();\n    }\n    return this._absoluteX;\n  }\n  set absoluteX(value) {\n    this._setAbsolutePosition(value, this.absoluteY);\n  }\n\n  /**\n   * The y-coordinate relative to the root GameObject\n   * @type {number}\n   */\n  get absoluteY() {\n    if (this._absoluteDirty) {\n      this._cacheAbsolutePosition();\n    }\n    return this._absoluteY;\n  }\n  set absoluteY(value) {\n    this._setAbsolutePosition(this.absoluteX, value);\n  }\n\n  /**\n   * The rotation relative to the root GameObject\n   * @type {number}\n   */\n  get absoluteRotation() {\n    if (this._absoluteDirty) {\n      this._cacheAbsolutePosition();\n    }\n    return this._absoluteRotation;\n  }\n  set absoluteRotation(value) {\n    this.rotation = value - this.gameObject.parent.transform.absoluteRotation;\n  }\n\n  _cacheAbsolutePosition() {\n    const parentAbsoluteX = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteX\n      : 0;\n    const parentAbsoluteY = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteY\n      : 0;\n    const parentAbsoluteRotation = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteRotation\n      : 0;\n\n    // angle is negative to negate parent rotation\n    const sin = Math.sin(-parentAbsoluteRotation);\n    const cos = Math.cos(-parentAbsoluteRotation);\n\n    this._absoluteX = this.x * cos - this.y * sin + parentAbsoluteX;\n    this._absoluteY = this.x * sin + this.y * cos + parentAbsoluteY;\n    this._absoluteRotation = parentAbsoluteRotation + this._rotation;\n\n    this._absoluteDirty = false;\n  }\n\n  _setAbsolutePosition(x, y) {\n    const parentAbsoluteX = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteX\n      : 0;\n    const parentAbsoluteY = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteY\n      : 0;\n    const parentAbsoluteRotation = this.gameObject.parent\n      ? this.gameObject.parent.transform.absoluteRotation\n      : 0;\n\n    const offsetX = x - parentAbsoluteX;\n    const offsetY = y - parentAbsoluteY;\n    const sin = Math.sin(parentAbsoluteRotation);\n    const cos = Math.cos(parentAbsoluteRotation);\n\n    this.x = offsetX * cos - offsetY * sin;\n    this.y = offsetX * sin + offsetY * cos;\n  }\n}\n\nmodule.exports = Transform;\n","/**\n * GameLoop is responsible for updating game logic on every frame\n */\nclass GameLoop {\n  /**\n   * Create a GameLoop\n   * @param {GameObject} gameObject - The root GameObject to be updated\n   */\n  constructor(gameObject) {\n    this.gameObject = gameObject;\n    this._currAnimationFrame = window.requestAnimationFrame(currTime => {\n      this.gameLoop(currTime);\n    });\n  }\n\n  /**\n   * gameLoop is responsible for calling the logic in the GameObject via update\n   * gameLoop requests an animation frame and then recursively calls itself\n   * @param {DOMHighResTimeStamp} - The current time passed by requestAnimationFrame\n   * @return {number} The animation frame of the current request\n   */\n  gameLoop(currTime) {\n    if (!this.prevTime) this.prevTime = currTime;\n    let deltaTime = (currTime - this.prevTime) / 1000;\n    this.prevTime = currTime;\n\n    this.gameObject.update(deltaTime);\n\n    return window.requestAnimationFrame(currTime => {\n      this._currAnimationFrame = this.gameLoop(currTime);\n    });\n  }\n}\n\nmodule.exports = GameLoop;\n","const Component = require(\"../Component\");\n\n/**\n * A component for rendering GameObjects to canvas context\n * @extends Component\n */\nclass Camera extends Component {\n  /**\n   *\n   * @param {HTMLCanvasElement} canvas - The canvas to render to\n   * @param {GameObject} root - The GameObject to be rendered\n   */\n  constructor(canvas, root) {\n    super();\n\n    this._canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.root = root;\n\n    this._width = canvas.width;\n    this._height = canvas.height;\n    this._x = this._width / 2;\n    this._y = this._height / 2;\n    this.ctx.translate(this._x, this._y);\n  }\n\n  /**\n   * Renders to context every frame\n   * @param {number} currTime - The timestamp passed by requestAnimationFrame\n   */\n  update() {\n    this.ctx.clearRect(-this._x, -this._y, this._width, this._height);\n\n    this.ctx.save();\n\n    const offsetX = this.root.transform.absoluteX - this.transform.absoluteX;\n    const offsetY = this.root.transform.absoluteY - this.transform.absoluteY;\n    const offsetRotation =\n      this.root.transform.absoluteRotation - this.transform.absoluteRotation;\n\n    this.ctx.rotate(offsetRotation);\n    this.ctx.translate(offsetX, -offsetY);\n\n    this.root.render(this.ctx);\n\n    this.ctx.restore();\n  }\n}\n\nmodule.exports = Camera;\n","const Component = require(\"../Component\");\n\n/**\n * A component for rendering text\n * @extends Component\n */\nclass Text extends Component {\n  /**\n   * Create a Text\n   * @param {string} text - The text to be rendered\n   */\n  constructor(text) {\n    super();\n\n    this.text = text;\n  }\n\n  /**\n   * Renders the text\n   * @param {CanvasRenderingContext2D} ctx - The context to be rendered on\n   */\n  render(ctx) {\n    ctx.font = \"12px serif\";\n    ctx.fillStyle = \"black\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    ctx.fillText(this.text, 0, 0);\n  }\n}\n\nmodule.exports = Text;\n","const Component = require(\"../Component\");\n\n/**\n * A component that renders a ShapeType\n * @extends Component\n */\nclass Shape extends Component {\n  /**\n   * The type of shape to render\n   * @param {ShapeType} shapeType\n   */\n  constructor(shapeType) {\n    super();\n\n    this.shapeType = shapeType;\n  }\n\n  render(ctx) {\n    ctx.strokeStyle = \"black\";\n    this.shapeType.render(ctx);\n  }\n}\n\nmodule.exports = Shape;\n","const Component = require(\"../Component\");\nconst GameObject = require(\"../GameObject\");\n\n/**\n * A component for determining if GameObjects are colliding\n * @extends Component\n */\nclass Hitbox extends Component {\n  /**\n   * The shape of this Hitbox\n   * @param {ShapeType} shapeType\n   */\n  constructor(shapeType, hurtboxes = []) {\n    super();\n\n    this.shapeType = shapeType;\n    this._hurtboxes = hurtboxes;\n\n    this._onHit = [];\n\n    this._isHitting = {};\n  }\n\n  /**\n   * Checks for collisions every frame and handles callbacks\n   * @param {*} hurtbox\n   */\n  update(deltaTime) {\n    for (const hurtbox of this._hurtboxes) {\n      const isHitting = this.shapeType.isHitting(this, hurtbox);\n      if (isHitting) {\n        this._isHitting[hurtbox] = true;\n        hurtbox._isHitting[this] = true;\n        for (const callback of this._onHit) {\n          callback(this, hurtbox);\n        }\n      } else {\n        this._isHitting[hurtbox] = false;\n        hurtbox._isHitting[this] = false;\n      }\n    }\n  }\n\n  /**\n   * A callback function for handling on hit events\n   * @callback hitCallback\n   * @param {GameObject} self\n   * @param {GameObject} hurtbox\n   */\n\n  /**\n   * A callback function for OnHit\n   * @param {hitCallback}\n   */\n  addOnHit(hitCallback) {\n    this._onHit.push(hitCallback);\n  }\n\n  /**\n   * Is this colliding with another Hitbox\n   * @param {Hitbox} hurtbox\n   */\n  isHitting(hurtbox) {\n    return this._isHitting[hurtbox];\n  }\n}\n\nmodule.exports = Hitbox;\n","const Component = require(\"../Component\");\n\n/**\n * A component for handling movement of GameObjects\n * @extends Component\n */\nclass Physics extends Component {\n  /**\n   *\n   * @param {number} x - Pixels to move horizontally every second\n   * @param {number} y - Pixels to move vertically every second\n   */\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Updates position every frame\n   * @param {number} deltaTime - The time elapsed since the previous update\n   */\n  update(elapsedTime) {\n    this.gameObject.transform.x += this.x * elapsedTime;\n    this.gameObject.transform.y += this.y * elapsedTime;\n  }\n}\n\nmodule.exports = Physics;\n","const Input = require(\"./Input\");\nconst MouseButton = require(\"./MouseButton\");\n\n/**\n * A class to handle mouse inputs\n * @extends Input\n */\nclass Mouse extends Input {\n  /**\n   * Create a Mouse object\n   */\n  constructor(camera) {\n    super(\"mousedown\", \"mouseup\", \"button\");\n\n    this._x = 0;\n    this._y = 0;\n\n    this.camera = camera;\n\n    // this will not call _onMouseMove directly\n    document.addEventListener(\"mousemove\", event => {\n      this._onMouseMove(event);\n    });\n  }\n\n  /**\n   * Gets the MouseButton cooresponding to this mouse event\n   * @param {number} mouseButton - The button code for this mouse button\n   */\n  getButton(buttonCode) {\n    let button = this._pressables[buttonCode];\n    if (button) {\n      return button;\n    }\n\n    button = new MouseButton();\n    this._pressables[buttonCode] = button;\n    return button;\n  }\n\n  /**\n   * @type {number}\n   */\n  get x() {\n    return this._x;\n  }\n\n  /**\n   * @type {number}\n   */\n  get y() {\n    return this._y;\n  }\n\n  _onMouseMove(event) {\n    const rect = this.camera._canvas.getBoundingClientRect();\n    this._x = event.clientX - Math.round(rect.left - 0.5) - this.camera._x;\n    this._y = -(event.clientY - Math.round(rect.top - 0.5) - this.camera._y);\n  }\n}\n\nmodule.exports = Mouse;\n","const Pressable = require(\"./Pressable\");\n\n/**\n * Handles logic for a mouse button\n * @extends Pressable\n */\nclass MouseButton extends Pressable {\n  constructor() {\n    super();\n  }\n\n  /**\n   * This callback type is for key event callbacks\n   *\n   * @callback mouseCallback\n   * @param{MouseEvent} event\n   */\n\n  /**\n   * Add a function to call on keydown event\n   * @param {mouseCallback} onMouseDown - Function to be called on keydown event\n   */\n  addMouseDown(onMouseDown) {\n    this._onPressDown.push(onMouseDown);\n  }\n\n  /**\n   * Add a function to call on keyup event\n   * @param {mouseCallback} onMouseUp - Function to be called on keyup event\n   */\n  addMouseUp(onMouseUp) {\n    this._onPressUp.push(onMouseUp);\n  }\n}\n\nmodule.exports = MouseButton;\n","const Input = require(\"./Input\");\nconst Key = require(\"./Key\");\n\n/**\n * Represents keys on the user's keyboard\n * @extends Input\n */\nclass Keyboard extends Input {\n  /**\n   * Create a Keyboard object\n   */\n  constructor() {\n    super(\"keydown\", \"keyup\", \"keyCode\");\n  }\n\n  /**\n   * Gets the Key cooresponding to this keycode\n   * @param {number} keyCode - The javascript keycode for this Key\n   */\n  getKey(keyCode) {\n    let key = this._pressables[keyCode];\n    if (key) {\n      return key;\n    }\n\n    key = new Key();\n    this._pressables[keyCode] = key;\n    return key;\n  }\n}\n\nmodule.exports = Keyboard;\n","const Pressable = require(\"./Pressable\");\n\n/**\n * Handles logic for a key on the Keyboard\n * @extends Pressable\n */\nclass Key extends Pressable {\n  constructor() {\n    super();\n  }\n\n  /**\n   * This callback type is for key event callbacks\n   *\n   * @callback keyCallback\n   * @param{KeyboardEvent} event\n   */\n\n  /**\n   * Add a function to call on keydown event\n   * @param {keyCallback} onKeyDown - Function to be called on keydown event\n   */\n  addKeyDown(onKeyDown) {\n    this._onPressDown.push(onKeyDown);\n  }\n\n  /**\n   * Add a function to call on keyup event\n   * @param {keyCallback} onKeyUp - Function to be called on keyup event\n   */\n  addKeyUp(onKeyUp) {\n    this._onPressUp.push(onKeyUp);\n  }\n}\n\nmodule.exports = Key;\n","/**\n * A Circle\n *\n * @impliments {ShapeType}\n */\nclass Circle {\n  /**\n   * Create a Circle object\n   *\n   * @param {number} radius - Radius of the circle\n   */\n  constructor(radius) {\n    this.radius = radius;\n  }\n\n  render(ctx) {\n    ctx.beginPath();\n    ctx.arc(0, 0, this.radius, 0, Math.PI * 2);\n    ctx.stroke();\n  }\n\n  isHitting(self, hurtbox) {\n    return hurtbox.shapeType._isHittingCircle(hurtbox, self);\n  }\n\n  _isHittingCircle(hitbox, self) {\n    let distanceBetween = Math.sqrt(\n      Math.pow(hitbox.transform.absoluteX - self.transform.absoluteX, 2) +\n        Math.pow(hitbox.transform.absoluteY - self.transform.absoluteY, 2)\n    );\n    return distanceBetween <= hitbox.shapeType.radius + self.shapeType.radius;\n  }\n}\n\nmodule.exports = Circle;\n","const Coordinate = require(\"./Coordinate\");\n\n/**\n * Represent cartesian coordinates\n * @extends Coordinate\n */\nclass Cartesian extends Coordinate {\n  /**\n   *\n   * @param {number} x - The x value of the Coordinate\n   * @param {number} y - The y value of the Coordinate\n   */\n  constructor(x, y) {\n    super();\n\n    this._x = x;\n    this._y = y;\n\n    this._dirtyPolar = true;\n  }\n}\n\nmodule.exports = Cartesian;\n","const Coordinate = require(\"./Coordinate\");\n\n/**\n * Represent polar coordinates\n * @extends Coordinate\n */\nclass Polar extends Coordinate {\n  /**\n   *\n   * @param {number} magnitude - The magnitude of the Coordinate\n   * @param {number} angle - The angle of the Coordinate\n   */\n  constructor(magnitude, angle) {\n    super();\n\n    this._magnitude = magnitude;\n    this._angle = angle;\n\n    this._dirtyCartesian = true;\n  }\n}\n\nmodule.exports = Polar;\n"],"sourceRoot":""}